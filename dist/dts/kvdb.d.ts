export declare const DB_NAME = "keyvalue_database";
export declare const STORE_NAME = "keyvalue_store";
declare function getStore(mode?: IDBTransactionMode, version?: number): Promise<IDBObjectStore>;
declare function get<T>(key: IDBValidKey): Promise<T>;
declare function add<T>(key: IDBValidKey, value: T): Promise<IDBValidKey>;
declare function set<T>(key: IDBValidKey, value: T): Promise<IDBValidKey>;
declare function remove(query: IDBValidKey | IDBKeyRange): Promise<void | void[]>;
declare function clear(): Promise<undefined>;
declare function count(): Promise<number>;
declare function getKey(key: IDBValidKey | IDBKeyRange): Promise<IDBValidKey | undefined>;
declare function getAllKeys(query?: IDBValidKey | IDBKeyRange | undefined | null, count?: number): Promise<IDBValidKey[]>;
declare function getAllValues<T = any>(query?: IDBValidKey | IDBKeyRange | undefined | null, count?: number): Promise<T[]>;
export type IterableEntities<T> = Array<T> | IterableIterator<T>;
declare function addMany(entities: IterableEntities<[IDBValidKey, any] | IDBValidKey[]>): Promise<IDBValidKey[]>;
declare function setMany(entities: IterableEntities<[IDBValidKey, any] | IDBValidKey[]>): Promise<IDBValidKey[]>;
declare function getMany<T extends any[] = any[]>(entities: IterableEntities<IDBValidKey>): Promise<T>;
declare function removeMany(keys: IterableEntities<IDBValidKey | IDBKeyRange>): Promise<undefined[]>;
declare const kvdb: {
    getStore: typeof getStore;
    get: typeof get;
    add: typeof add;
    set: typeof set;
    remove: typeof remove;
    clear: typeof clear;
    count: typeof count;
    getKey: typeof getKey;
    getAllKeys: typeof getAllKeys;
    getAllValues: typeof getAllValues;
    addMany: typeof addMany;
    setMany: typeof setMany;
    getMany: typeof getMany;
    removeMany: typeof removeMany;
};
export default kvdb;
